# generated by datamodel-codegen:
#   filename:  nitestmonitor-v2.json
#   timestamp: 2023-10-02T22:32:08+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint


class Error(BaseModel):
    name: Optional[str] = Field(None, description="String error code")
    code: Optional[int] = Field(None, description="Numeric error code")
    resourceType: Optional[str] = Field(
        None, description="Type of resource associated with the error"
    )
    resourceId: Optional[str] = Field(
        None, description="Identifier of the resource associated with the error"
    )
    message: Optional[str] = Field(None, description="Complete error message")
    args: Optional[List[str]] = Field(
        None, description="Positional argument values for the error code"
    )
    innerErrors: Optional[List[Error]] = None


class Operation(BaseModel):
    available: bool = Field(
        ..., description="Whether the operation is available to the caller"
    )
    version: Optional[int] = Field(
        None, description="Version of the available operation"
    )


class Operations(BaseModel):
    getResults: Optional[Operation] = None
    queryResults: Optional[Operation] = None
    createResults: Optional[Operation] = None
    updateResults: Optional[Operation] = None
    deleteResult: Optional[Operation] = None
    deleteManyResults: Optional[Operation] = None
    getSteps: Optional[Operation] = None
    querySteps: Optional[Operation] = None
    createSteps: Optional[Operation] = None
    updateSteps: Optional[Operation] = None
    deleteStep: Optional[Operation] = None
    deleteManySteps: Optional[Operation] = None


class V1Operations(BaseModel):
    operations: Optional[Operations] = Field(
        None, description="Available operations in the v1 version of the API."
    )


class Operations1(BaseModel):
    getResults: Optional[Operation] = None
    queryResults: Optional[Operation] = None
    createResults: Optional[Operation] = None
    updateResults: Optional[Operation] = None
    deleteResult: Optional[Operation] = None
    deleteManyResults: Optional[Operation] = None
    getSteps: Optional[Operation] = None
    querySteps: Optional[Operation] = None
    createSteps: Optional[Operation] = None
    updateSteps: Optional[Operation] = None
    deleteStep: Optional[Operation] = None
    deleteManySteps: Optional[Operation] = None
    getProducts: Optional[Operation] = None
    queryProducts: Optional[Operation] = None
    createProducts: Optional[Operation] = None
    updateProducts: Optional[Operation] = None
    deleteProducts: Optional[Operation] = None
    deleteManyProducts: Optional[Operation] = None
    queryPaths: Optional[Operation] = None


class V2Operations(BaseModel):
    operations: Optional[Operations1] = Field(
        None, description="Available operations in the v2 version of the API."
    )


class StatusType(Enum):
    LOOPING = "LOOPING"
    SKIPPED = "SKIPPED"
    CUSTOM = "CUSTOM"
    DONE = "DONE"
    PASSED = "PASSED"
    FAILED = "FAILED"
    RUNNING = "RUNNING"
    WAITING = "WAITING"
    TERMINATED = "TERMINATED"
    ERRORED = "ERRORED"
    TIMED_OUT = "TIMED_OUT"


class Status(BaseModel):
    statusType: StatusType = Field(
        ..., description="Status type enum", example="PASSED"
    )
    statusName: Optional[str] = Field(None, description="Status name", example="Passed")


class NamedValue(BaseModel):
    name: str = Field(..., description="The name of the value", example="Voltage")
    value: Optional[Dict[str, Any]] = Field(None, description="The value", example=1.3)


class OrderByComparisonType(Enum):
    DEFAULT = "DEFAULT"
    LEXICOGRAPHIC = "LEXICOGRAPHIC"
    NUMERIC = "NUMERIC"


class ProductValuesQueryField(Enum):
    ID = "ID"
    PART_NUMBER = "PART_NUMBER"
    NAME = "NAME"
    FAMILY = "FAMILY"
    UPDATED_AT = "UPDATED_AT"


class ProductQueryOrderByField(Enum):
    ID = "ID"
    PART_NUMBER = "PART_NUMBER"
    NAME = "NAME"
    FAMILY = "FAMILY"
    UPDATED_AT = "UPDATED_AT"


class ProductField(Enum):
    ID = "ID"
    PART_NUMBER = "PART_NUMBER"
    NAME = "NAME"
    FAMILY = "FAMILY"
    UPDATED_AT = "UPDATED_AT"
    KEYWORDS = "KEYWORDS"
    PROPERTIES = "PROPERTIES"
    FILE_IDS = "FILE_IDS"


class ResultValuesQueryField(Enum):
    ID = "ID"
    STARTED_AT = "STARTED_AT"
    UPDATED_AT = "UPDATED_AT"
    PROGRAM_NAME = "PROGRAM_NAME"
    SYSTEM_ID = "SYSTEM_ID"
    HOST_NAME = "HOST_NAME"
    OPERATOR = "OPERATOR"
    SERIAL_NUMBER = "SERIAL_NUMBER"
    PART_NUMBER = "PART_NUMBER"
    TOTAL_TIME_IN_SECONDS = "TOTAL_TIME_IN_SECONDS"


class ResultQueryOrderByField(Enum):
    ID = "ID"
    STARTED_AT = "STARTED_AT"
    UPDATED_AT = "UPDATED_AT"
    PROGRAM_NAME = "PROGRAM_NAME"
    SYSTEM_ID = "SYSTEM_ID"
    HOST_NAME = "HOST_NAME"
    OPERATOR = "OPERATOR"
    SERIAL_NUMBER = "SERIAL_NUMBER"
    PART_NUMBER = "PART_NUMBER"
    PROPERTIES = "PROPERTIES"
    TOTAL_TIME_IN_SECONDS = "TOTAL_TIME_IN_SECONDS"


class ResultField(Enum):
    ID = "ID"
    STATUS = "STATUS"
    STARTED_AT = "STARTED_AT"
    UPDATED_AT = "UPDATED_AT"
    PROGRAM_NAME = "PROGRAM_NAME"
    SYSTEM_ID = "SYSTEM_ID"
    HOST_NAME = "HOST_NAME"
    OPERATOR = "OPERATOR"
    SERIAL_NUMBER = "SERIAL_NUMBER"
    PART_NUMBER = "PART_NUMBER"
    TOTAL_TIME_IN_SECONDS = "TOTAL_TIME_IN_SECONDS"
    KEYWORDS = "KEYWORDS"
    PROPERTIES = "PROPERTIES"
    FILE_IDS = "FILE_IDS"
    DATA_TABLE_IDS = "DATA_TABLE_IDS"
    STATUS_TYPE_SUMMARY = "STATUS_TYPE_SUMMARY"
    WORKSPACE = "WORKSPACE"


class StepValuesQueryField(Enum):
    NAME = "NAME"
    STEP_TYPE = "STEP_TYPE"
    STEP_ID = "STEP_ID"
    PARENT_ID = "PARENT_ID"
    RESULT_ID = "RESULT_ID"
    PATH = "PATH"
    TOTAL_TIME_IN_SECONDS = "TOTAL_TIME_IN_SECONDS"
    STARTED_AT = "STARTED_AT"
    UPDATED_AT = "UPDATED_AT"
    DATA_MODEL = "DATA_MODEL"


class StepQueryOrderByField(Enum):
    NAME = "NAME"
    STEP_TYPE = "STEP_TYPE"
    STEP_ID = "STEP_ID"
    PARENT_ID = "PARENT_ID"
    RESULT_ID = "RESULT_ID"
    PATH = "PATH"
    TOTAL_TIME_IN_SECONDS = "TOTAL_TIME_IN_SECONDS"
    STARTED_AT = "STARTED_AT"
    UPDATED_AT = "UPDATED_AT"
    DATA_MODEL = "DATA_MODEL"


class StepField(Enum):
    NAME = "NAME"
    STEP_TYPE = "STEP_TYPE"
    STEP_ID = "STEP_ID"
    PARENT_ID = "PARENT_ID"
    RESULT_ID = "RESULT_ID"
    PATH = "PATH"
    PATH_IDS = "PATH_IDS"
    STATUS = "STATUS"
    TOTAL_TIME_IN_SECONDS = "TOTAL_TIME_IN_SECONDS"
    STARTED_AT = "STARTED_AT"
    UPDATED_AT = "UPDATED_AT"
    INPUTS = "INPUTS"
    OUTPUTS = "OUTPUTS"
    DATA_MODEL = "DATA_MODEL"
    DATA = "DATA"
    HAS_CHILDREN = "HAS_CHILDREN"
    WORKSPACE = "WORKSPACE"


class PathQueryOrderByField(Enum):
    ID = "ID"
    PROGRAM_NAME = "PROGRAM_NAME"
    PART_NUMBER = "PART_NUMBER"
    PATH = "PATH"


class PathField(Enum):
    ID = "ID"
    PROGRAM_NAME = "PROGRAM_NAME"
    PART_NUMBER = "PART_NUMBER"
    PATH = "PATH"
    PATH_NAMES = "PATH_NAMES"
    INPUTS = "INPUTS"
    OUTPUTS = "OUTPUTS"
    MEASUREMENTS = "MEASUREMENTS"


class ValueType(Enum):
    MIXED = "MIXED"
    null = "null"
    BOOLEAN = "BOOLEAN"
    NUMBER = "NUMBER"
    STRING = "STRING"
    ARRAY = "ARRAY"
    OBJECT = "OBJECT"


class ResponseFormat(Enum):
    JSON = "JSON"
    CSV = "CSV"


class ProductRequest(BaseModel):
    partNumber: Optional[str] = Field(
        None, description="The part number of the product", example="156502A-11L"
    )
    name: Optional[str] = Field(
        None, description="The name of the product", example="cRIO-9030"
    )
    family: Optional[str] = Field(
        None, description="The family of the product", example="cRIO"
    )
    keywords: Optional[List[str]] = Field(
        None,
        description="Words or phrases associated with the product",
        example=["keyword1", "keyword2"],
    )
    properties: Optional[Dict[str, str]] = Field(
        None,
        description="Key-value pairs associated with the product",
        example={"key1": "value1"},
    )
    fileIds: Optional[List[str]] = Field(
        None,
        description="Array of file IDs attached to the product. This API does not verify that the file IDs included exist.",
        example=["5ccb19ce5aa0a3348872c3e3"],
    )


class ProductResponse(BaseModel):
    id: Optional[str] = Field(
        None,
        description="ID of the product",
        example="02600cf8-c2bb-4ff9-a139-031e943fb0c0",
    )
    partNumber: Optional[str] = Field(
        None, description="The part number of the product", example="156502A-11L"
    )
    name: Optional[str] = Field(
        None, description="The name of the product", example="cRIO-9030"
    )
    family: Optional[str] = Field(
        None, description="The family of the product", example="cRIO"
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the product was last updated.",
        example="2018-05-09T15:07:42.527921Z",
    )
    keywords: Optional[List[str]] = Field(
        None,
        description="Words or phrases associated with the product",
        example=["keyword1", "keyword2"],
    )
    properties: Optional[Dict[str, str]] = Field(
        None,
        description="Key-value pairs associated with the product",
        example={"key1": "value1"},
    )
    fileIds: Optional[List[str]] = Field(
        None,
        description="Array of file IDs attached to the product. This API does not verify that the file IDs included exist.",
        example=["5e30934193cac8046851acb2"],
    )


class ProductUpdateRequest(BaseModel):
    id: Optional[str] = Field(
        None,
        description="ID of the product to update",
        example="02600cf8-c2bb-4ff9-a139-031e943fb0c0",
    )
    name: Optional[str] = Field(
        None, description="The name of the product", example="cRIO-9030"
    )
    family: Optional[str] = Field(
        None, description="The family of the product", example="cRIO"
    )
    keywords: Optional[List[str]] = Field(
        None,
        description="Words or phrases associated with the product",
        example=["keyword1", "keyword2"],
    )
    properties: Optional[Dict[str, str]] = Field(
        None,
        description="Key-value pairs associated with the product",
        example={"key1": "value1"},
    )
    fileIds: Optional[List[str]] = Field(
        None,
        description="Array of file IDs attached to the product. This API does not verify that the file IDs included exist.",
        example=["5e30934193cac8046851acb2"],
    )


class TestResultRequest(BaseModel):
    programName: str = Field(..., description="Program name", example="My Program Name")
    status: Status
    systemId: Optional[str] = Field(None, description="System id", example="my-system")
    hostName: Optional[str] = Field(None, description="Host name", example="My-Host")
    properties: Optional[Dict[str, str]] = Field(
        None, description="Test result properties", example={"key1": "value1"}
    )
    keywords: Optional[List[str]] = Field(
        None,
        description="Words or phrases associated with the test result",
        example=["keyword1", "keyword2"],
    )
    serialNumber: Optional[str] = Field(
        None, description="Serial number", example="123-456"
    )
    operator: Optional[str] = Field(None, description="Operator", example="admin")
    partNumber: Optional[str] = Field(
        None,
        description="The part number of the device under test.",
        example="cRIO-9030",
    )
    fileIds: Optional[List[str]] = Field(
        None,
        description="Array of file ids attached to the test result. This API does not verify that the file IDs included exist.",
        example=["5e30934193cac8046851acb2"],
    )
    dataTableIds: Optional[List[str]] = Field(
        None,
        description="Array of data table ids attached to the test result. This API does not verify that the data table IDs included exist.",
        example=["62333547f7521f2f2f4615e5"],
    )
    startedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the test result began",
        example="2018-05-07T18:58:05.219692Z",
    )
    totalTimeInSeconds: Optional[float] = Field(
        0, description="Total run-time of the test in seconds", example=29.9
    )
    workspace: Optional[str] = Field(
        None,
        description="The workspace the test result belongs to",
        example="f94b178e-288c-4101-afb1-833992413aa7",
    )


class TestResultResponse(BaseModel):
    status: Optional[Status] = None
    startedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the test result began",
        example="2018-05-07T18:58:05.219692Z",
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the result was last updated",
        example="2018-05-09T15:07:42.527921Z",
    )
    programName: Optional[str] = Field(
        None, description="Program name", example="My test program"
    )
    id: str = Field(
        ...,
        description="Id of the test result",
        example="02600cf8-c2bb-4ff9-a139-031e943fb0c0",
    )
    systemId: Optional[str] = Field(
        None, description="Id of the system", example="5e30931993cac8046850a996"
    )
    hostName: Optional[str] = Field(
        None, description="Host name of the system", example="My-Host"
    )
    operator: Optional[str] = Field(
        None, description="Name of the operator running the test", example="admin"
    )
    partNumber: Optional[str] = Field(
        None,
        description="The part number of the device under test.",
        example="cRIO-9030",
    )
    serialNumber: Optional[str] = Field(
        None,
        description="Sequential number of the device under test",
        example="abc-123",
    )
    totalTimeInSeconds: Optional[float] = Field(
        None, description="Total run-time of the test in seconds", example=29.9
    )
    keywords: Optional[List[str]] = Field(
        None,
        description="Words or phrases associated with the test result",
        example=["keyword1", "keyword2"],
    )
    properties: Optional[Dict[str, str]] = Field(
        None, description="Test result properties", example={"key1": "value1"}
    )
    fileIds: Optional[List[str]] = Field(
        None,
        description="Array of file ids attached to the test result. This API does not verify that the file IDs included exist.",
        example=[],
    )
    dataTableIds: Optional[List[str]] = Field(
        None,
        description="Array of data table ids attached to the test result. This API does not verify that the data table IDs included exist.",
        example=[],
    )
    statusTypeSummary: Optional[Dict[str, int]] = Field(
        None, description="Status type summary", example={"FAILED": 5}
    )
    workspace: Optional[str] = Field(
        None,
        description="The workspace the test result belongs to",
        example="f94b178e-288c-4101-afb1-833992413aa7",
    )


class TestResultUpdateFailure(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Test result id to update",
        example="02600cf8-c2bb-4ff9-a139-031e943fb0c0",
    )
    programName: Optional[str] = Field(
        None, description="Program name", example="My Program Name"
    )
    status: Optional[Status] = None
    systemId: Optional[str] = Field(None, description="System id", example="my-system")
    hostName: Optional[str] = Field(None, description="Host name", example="My-Host")
    properties: Optional[Dict[str, str]] = Field(
        None, description="Test result properties", example={"key1": "value1"}
    )
    keywords: Optional[List[str]] = Field(
        None,
        description="Words or phrases associated with the test result",
        example=["keyword1", "keyword2"],
    )
    serialNumber: Optional[str] = Field(
        None, description="Serial number", example="123-456"
    )
    operator: Optional[str] = Field(None, description="Operator", example="admin")
    partNumber: Optional[str] = Field(
        None,
        description="The part number of the device under test.",
        example="cRIO-9030",
    )
    fileIds: Optional[List[str]] = Field(
        None,
        description="Array of file ids attached to the test result. This API does not verify that the file IDs included exist.",
        example=["5e30934193cac8046851acb2"],
    )
    dataTableIds: Optional[List[str]] = Field(
        None,
        description="Array of data table ids attached to the test result. This API does not verify that the data table IDs included exist.",
        example=["62333547f7521f2f2f4615e5"],
    )
    startedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the test result began",
        example="2018-05-07T18:58:05.219692Z",
    )
    totalTimeInSeconds: Optional[float] = Field(
        0, description="Total run-time of the test in seconds", example=29.9
    )
    workspace: Optional[str] = Field(
        None,
        description="The workspace the test result belongs to",
        example="f94b178e-288c-4101-afb1-833992413aa7",
    )


class TestResultUpdateRequest(BaseModel):
    id: str = Field(
        ...,
        description="Test result id to update",
        example="02600cf8-c2bb-4ff9-a139-031e943fb0c0",
    )
    programName: Optional[str] = Field(
        None, description="Program name", example="My Program Name"
    )
    status: Optional[Status] = None
    systemId: Optional[str] = Field(None, description="System id", example="my-system")
    hostName: Optional[str] = Field(None, description="Host name", example="My-Host")
    properties: Optional[Dict[str, str]] = Field(
        None, description="Test result properties", example={"key1": "value1"}
    )
    keywords: Optional[List[str]] = Field(
        None,
        description="Words or phrases associated with the test result",
        example=["keyword1", "keyword2"],
    )
    serialNumber: Optional[str] = Field(
        None, description="Serial number", example="123-456"
    )
    operator: Optional[str] = Field(None, description="Operator", example="admin")
    partNumber: Optional[str] = Field(
        None,
        description="The part number of the device under test.",
        example="cRIO-9030",
    )
    fileIds: Optional[List[str]] = Field(
        None,
        description="Array of file ids attached to the test result. This API does not verify that the file IDs included exist.",
        example=["5e30934193cac8046851acb2"],
    )
    dataTableIds: Optional[List[str]] = Field(
        None,
        description="Array of data table ids attached to the test result. This API does not verify that the data table IDs included exist.",
        example=["62333547f7521f2f2f4615e5"],
    )
    startedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the test result began",
        example="2018-05-07T18:58:05.219692Z",
    )
    totalTimeInSeconds: Optional[float] = Field(
        0, description="Total run-time of the test in seconds", example=29.9
    )
    workspace: Optional[str] = Field(
        None,
        description="The workspace the test result belongs to",
        example="f94b178e-288c-4101-afb1-833992413aa7",
    )


class UpdateTestResultsRequest(BaseModel):
    results: List[TestResultUpdateRequest] = Field(
        ..., description="Array of test results to update"
    )
    replace: Optional[bool] = Field(
        False, description="Replace the existing fields instead of merging them"
    )
    determineStatusFromSteps: Optional[bool] = Field(
        False, description="Determine test result status from the test step statuses"
    )


class ValueSummary(BaseModel):
    type: Optional[ValueType] = None
    min: Optional[float] = Field(
        None,
        description='The minimum recorded value, if `type` is "NUMBER."',
        example=1.3,
    )
    max: Optional[float] = Field(
        None,
        description='The maximum recorded value, if `type` is "NUMBER."',
        example=2.6,
    )


class PathResponse(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The unique ID of this path. Note that this value may change if the collection is repaired.",
        example="02600cf8-c2bb-4ff9-a139-031e943fb0c0",
    )
    path: Optional[str] = Field(
        None,
        description="Identifies the steps that this path is representative of.",
        example="MainSequence Callback\nMy Step Name",
    )
    programName: Optional[str] = Field(
        None,
        description="The program name for which this path is defined.",
        example="MyProgram.seq",
    )
    partNumber: Optional[str] = Field(
        None,
        description="The part number for which this path is defined.",
        example="156502A-11L",
    )
    pathNames: Optional[List[str]] = Field(
        None,
        description="The list of all ancestor step names for any step which corresponds to this path.",
        example=["MainSequence Callback", "VoltageTest"],
    )
    inputs: Optional[Dict[str, ValueSummary]] = Field(
        None,
        description="The set of inputs that steps which correspond to this path may take.",
    )
    outputs: Optional[Dict[str, ValueSummary]] = Field(
        None,
        description="The set of outputs that steps which correspond to this path may log.",
    )
    measurements: Optional[Dict[str, Dict[str, Any]]] = Field(
        None,
        description="The set of measurements that steps which correspond to this path may take.",
        example={"myMeasurement": {}},
    )


class ProductsAdvancedQuery(BaseModel):
    filter: Optional[str] = Field(
        None,
        description="The query filter in Dynamic Linq",
        example='(name != "cRIO-9030") && (family == @0)',
    )
    substitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=["cRIO"],
    )
    orderBy: Optional[ProductQueryOrderByField] = None
    descending: Optional[bool] = Field(
        False,
        description="-> Whether to return the products in descending order.",
        example=False,
    )
    projection: Optional[List[ProductField]] = Field(
        None,
        description="Specifies the product fields to project. When a field value is given here, the corresponding field will be present in all returned products, and all unspecified fields will be excluded. If no projection is specified, all product fields will be returned.",
    )
    take: Optional[conint(ge=-1)] = Field(
        1000, description="The maximum number of products to return.", example=1000
    )
    continuationToken: Optional[str] = Field(
        None,
        description="A token which allows the user to resume a query at the next item in the matching product set. When querying for products, a token will be returned if a query may be continued. To obtain the next page of products, pass the token to the service on a subsequent request.",
        example="token",
    )
    returnCount: Optional[bool] = Field(
        False,
        description="Whether to return the total number of products which match the provided filter, disregarding the take value.",
        example=False,
    )


class PathsAdvancedQuery(BaseModel):
    filter: Optional[str] = Field(
        None,
        description="The query filter in Dynamic Linq",
        example='programName == "MyTests.seq" || partNumber == "cRIO-9030"',
    )
    substitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=[2.5],
    )
    orderBy: Optional[PathQueryOrderByField] = None
    descending: Optional[bool] = Field(
        False,
        description="-> Whether to return the paths in descending order.",
        example=False,
    )
    projection: Optional[List[PathField]] = Field(
        None,
        description="Specifies the path fields to project. When a field value is given here, the corresponding field will be present in all returned paths, and all unspecified fields will be excluded. If no projection is specified, all path fields will be returned.",
    )
    take: Optional[conint(ge=-1)] = Field(
        1000, description="The maximum number of paths to return.", example=1000
    )
    continuationToken: Optional[str] = Field(
        None,
        description="A token which allows the user to resume a query at the next item in the matching path set. When querying for paths, a token will be returned if a query may be continued. To obtain the next page of paths, pass the token to the service on a subsequent request.",
        example="token",
    )
    returnCount: Optional[bool] = Field(
        False,
        description="Whether to return the total number of paths which match the provided filter, disregarding the take value.",
        example=False,
    )


class ResultsAdvancedQuery(BaseModel):
    filter: Optional[str] = Field(
        None,
        description="The result query filter in Dynamic Linq",
        example='(operator == "user1") || ((programName != "MyProgram") && (totalTimeInSeconds < @0))',
    )
    substitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=[2.5],
    )
    productFilter: Optional[str] = Field(
        None,
        description="The product query filter in Dynamic Linq",
        example='(name != "cRIO-9030") && (family == @0)',
    )
    productSubstitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=["cRIO"],
    )
    orderBy: Optional[ResultQueryOrderByField] = None
    descending: Optional[bool] = Field(
        False,
        description="Whether to return the results in descending order.",
        example=False,
    )
    orderByKey: Optional[str] = Field(
        None,
        description="The property name to order by when ordering by PROPERTIES. Results that do not contain the orderByKey will be considered the smallest value.",
        example="null",
    )
    orderByComparisonType: Optional[OrderByComparisonType] = None
    projection: Optional[List[ResultField]] = Field(
        None,
        description="Specifies the result fields to project. When a field value is given here, the corresponding field will be present in all returned results, and all unspecified fields will be excluded. If no projection is specified, all result fields will be returned.",
    )
    take: Optional[conint(ge=-1)] = Field(
        1000, description="The maximum number of products to return.", example=1000
    )
    continuationToken: Optional[str] = Field(
        None,
        description="A token which allows the user to resume a query at the next item in the matching product set. When querying for products, a token will be returned if a query may be continued. To obtain the next page of products, pass the token to the service on a subsequent request.",
        example="token",
    )
    returnCount: Optional[bool] = Field(
        False,
        description="Whether to return the total number of products which match the provided filter, disregarding the take value.",
        example=False,
    )
    responseFormat: Optional[ResponseFormat] = "JSON"


class StepsAdvancedQuery(BaseModel):
    filter: Optional[str] = Field(
        None,
        description="The step query filter in Dynamic Linq",
        example='(stepType == "NumericLimitTest") && (totalTimeInSeconds > @0)',
    )
    substitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=[2.5],
    )
    resultFilter: Optional[str] = Field(
        None,
        description="The result query filter in Dynamic Linq.",
        example='(programName != "mySequence.seq") && (operator == @0)',
    )
    resultSubstitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression for results. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=["user1"],
    )
    orderBy: Optional[StepQueryOrderByField] = None
    descending: Optional[bool] = Field(
        False,
        description="-> Whether to return the steps in descending order.",
        example=False,
    )
    projection: Optional[List[StepField]] = Field(
        None,
        description="Specifies the step fields to project. When a field value is given here, the corresponding field will be present in all returned steps, and all unspecified fields will be excluded. If no projection is specified, all step fields will be returned.",
    )
    take: Optional[conint(ge=-1)] = Field(
        1000, description="The maximum number of steps to return.", example=1000
    )
    continuationToken: Optional[str] = Field(
        None,
        description="A token which allows the user to resume a query at the next item in the matching step set. When querying for steps, a token will be returned if a query may be continued. To obtain the next page of steps, pass the token to the service on a subsequent request.",
        example="token",
    )
    returnCount: Optional[bool] = Field(
        False,
        description="Whether to return the total number of steps which match the provided filter, disregarding the take value.",
        example=False,
    )
    responseFormat: Optional[ResponseFormat] = "JSON"


class ProductValuesQuery(BaseModel):
    field: ProductValuesQueryField
    filter: Optional[str] = Field(
        None,
        description="A Dynamic Linq query which specifies the products to consider when getting values.",
        example='name != "cRIO-9030"',
    )
    substitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=[2.5],
    )
    startsWith: Optional[str] = Field(
        None,
        description="Only return string values prefixed by this value (case sensitive).",
        example="cR",
    )


class ResultValuesQuery(BaseModel):
    field: ResultValuesQueryField
    filter: Optional[str] = Field(
        None,
        description="A Dynamic Linq query which specifies the results to consider when getting values.",
        example='programName != "MyProgram"',
    )
    substitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=[2.5],
    )
    startsWith: Optional[str] = Field(
        None,
        description="Only return string values prefixed by this value (case sensitive).",
        example="op",
    )


class StepValuesQuery(BaseModel):
    field: StepValuesQueryField
    filter: Optional[str] = Field(
        None,
        description="A Dynamic Linq query which specifies the steps to consider when getting values.",
        example='stepType != "NumericLimitTest"',
    )
    substitutions: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='Makes substitutions in the query filter expression. Substitutions for the query expression are indicated by non-negative integers that are prefixed with the "at" symbol. Each substitution in the given expression will be replaced by the element at the corresponding index (zero-based) in this list. For example, "@0" in the filter expression will be replaced with the element at the zeroth index of the substitutions list.',
        example=[2.5],
    )
    startsWith: Optional[str] = Field(
        None,
        description="Only return string values prefixed by this value (case sensitive).",
        example="op",
    )


class StepIdResultIdPair(BaseModel):
    stepId: str = Field(..., example="bd9126f5-b0b1-446a-8b08-dc6460047377")
    resultId: str = Field(..., example="02600cf8-c2bb-4ff9-a139-031e943fb0c0")


class StepData(BaseModel):
    text: Optional[str] = Field(
        None,
        description="Text string describing the output data",
        example="My output string",
    )
    parameters: Optional[List[Dict[str, str]]] = Field(
        None,
        description="Array of properties objects",
        example=[
            {
                "name": "Voltage",
                "status": "Passed",
                "measurement": "3.725",
                "lowLimit": "3.65",
                "highLimit": "3.8",
                "nominalValue": "3.7",
                "units": "volt",
                "comparisonType": "GELE",
            },
            {"nitmParameterType": "ADDITIONAL_RESULTS", "additionalProp": "myValue"},
        ],
    )


class TestStepsDeleteRequest(BaseModel):
    steps: List[StepIdResultIdPair] = Field(
        ..., description="Array of test step id and result id pairs to delete"
    )


class TestStepRequest(BaseModel):
    stepId: Optional[str] = Field(None, description="Step id", example="Step1")
    parentId: Optional[str] = Field(None, description="Parent step id", example="root")
    resultId: Optional[str] = Field(
        None, description="Result id", example="02600cf8-c2bb-4ff9-a139-031e943fb0c0"
    )
    children: Optional[List[TestStepRequest]] = Field(
        None, description="Nested child steps", example=[]
    )
    data: Optional[StepData] = None
    dataModel: Optional[str] = Field(
        None, description="Data model for the step", example="TestStand"
    )
    name: Optional[str] = Field(None, description="Step name", example="My Step")
    startedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the test result began",
        example="2018-05-07T18:58:05.219692Z",
    )
    status: Optional[Status] = None
    stepType: Optional[str] = Field(
        None, description="Step type", example="NumericLimitTest"
    )
    totalTimeInSeconds: Optional[float] = Field(
        0, description="Total number of seconds the step took to execute", example=29.9
    )
    inputs: Optional[List[NamedValue]] = Field(
        None, description="Inputs and their values passed to the test"
    )
    outputs: Optional[List[NamedValue]] = Field(
        None, description="Outputs and their values logged by the test"
    )


class TestStepCreateOrUpdateRequest(BaseModel):
    steps: List[TestStepRequest] = Field(
        ..., description="Array of test steps to create"
    )
    updateResultTotalTime: Optional[bool] = Field(
        False,
        description="Determine test result total time from the test step total times.",
    )


class TestStepResponse(BaseModel):
    name: Optional[str] = Field(None, description="Step name", example="My Step Name")
    stepType: Optional[str] = Field(
        None, description="Step type", example="NumericLimitTest"
    )
    stepId: Optional[str] = Field(None, description="Step id", example="Step1")
    parentId: Optional[str] = Field(None, description="Parent step id", example="root")
    resultId: Optional[str] = Field(
        None, description="Result id", example="02600cf8-c2bb-4ff9-a139-031e943fb0c0"
    )
    path: Optional[str] = Field(
        None, description="Step path", example="root.My Step Name"
    )
    pathIds: Optional[List[str]] = Field(
        None, description="Ids of the steps in the path", example=["root", "Step1"]
    )
    status: Optional[Status] = None
    totalTimeInSeconds: Optional[float] = Field(
        None, description="Total number of seconds the step took to execute", example=0
    )
    startedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the test result began",
        example="2018-05-07T18:58:05.219692Z",
    )
    updatedAt: Optional[datetime] = Field(
        None,
        description="ISO-8601 formatted timestamp indicating when the result was last updated",
        example="2018-05-09T15:07:42.527921Z",
    )
    inputs: Optional[List[NamedValue]] = Field(
        None, description="Inputs and their values passed to the test"
    )
    outputs: Optional[List[NamedValue]] = Field(
        None, description="Outputs and their values logged by the test"
    )
    dataModel: Optional[str] = Field(
        None,
        description="Custom string defining the model of the data object",
        example="TestStand",
    )
    data: Optional[StepData] = None
    hasChildren: Optional[bool] = Field(
        None,
        description="Whether this step object has any children step objects. When false, this means that this step object is a leaf node.",
        example=False,
    )
    workspace: Optional[str] = Field(
        None,
        description="The workspace the test step belongs to",
        example="f94b178e-288c-4101-afb1-833992413aa7",
    )

# Models undefined in OpenAPI and missed in auto generation

class ResultsQueryResponse(BaseModel):
    results: List[TestResultResponse]
    continuationToken: str
    totalCount: int

class CreateTestResultRequest(BaseModel):
    steps: List[TestResultRequest]

class PathsQueryResponse(BaseModel):
    paths: List[PathResponse]
    continuationToken: str
    totalCount: int

class CreateProductRequest(BaseModel):
    products: List[ProductRequest]

class CreateProductResponse(BaseModel):
    products: List[ProductResponse]

class ProductsQueryResponse(BaseModel):
    products: List[ProductResponse]
    continuationToken: str
    totalCount: str

Error.update_forward_refs()
TestStepRequest.update_forward_refs()
